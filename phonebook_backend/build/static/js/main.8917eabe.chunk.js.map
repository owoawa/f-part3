{"version":3,"sources":["services/Connection.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","personId","delete","r","personObj","post","id","newObject","put","Filter","setNewFilter","onChange","event","target","value","PersonForm","persons","setPersons","setMessage","useState","newName","setNewName","phoneNumber","setPhoneNumber","onSubmit","preventDefault","name","number","reduce","boolean","x","window","confirm","changedObj","find","n","changedPerson","connectionService","map","returnedPerson","concat","catch","error","console","log","message","isIt","setTimeout","type","Persons","newFilter","p","toLowerCase","includes","onClick","person","filter","Notification","style","background","color","fontSize","borderStyle","borderRadius","padding","marginBottom","App","newMessage","useEffect","initialPersons","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8917eabe.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst deletePerson = personId => {\n    const request = axios.delete(`${baseUrl}/${personId}`)\n    return request.then(r => r.data)\n}\nconst create = personObj => {\n    const request = axios.post(baseUrl, personObj)\n    return request.then(r => r.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, deletePerson, create, update }","import React from 'react'\n\nconst Filter = ({setNewFilter}) => {\n    return (\n        <div>\n            filter shown with <input onChange={(event) => setNewFilter(event.target.value)}/>\n        </div>\n    )\n}\n\nexport default Filter","import React, { useState } from 'react'\nimport connectionService from '../services/Connection'\n\nconst PersonForm = ({persons, setPersons, setMessage}) => {\n    \n    const [newName, setNewName] = useState('')\n    const [phoneNumber, setPhoneNumber] = useState('')\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        const personObj = {\n          name: newName,\n          number: phoneNumber,\n          // id: persons.length+1\n        }\n        const isThere = persons.reduce((boolean, x) => x.name === personObj.name || boolean, false)\n        if (isThere) {\n          if (window.confirm(`${personObj.name} is already added to phonebook, replace the old number with a new one?`)) {\n            const changedObj = persons.find(n => n.name === personObj.name)\n            const changedPerson = {...changedObj, number: personObj.number}\n            connectionService.update(changedPerson.id, changedPerson).then(r => setPersons(persons.map(x => x.id !== changedPerson.id ? x : r)))\n          }\n        } else {\n          connectionService.create(personObj).then(returnedPerson => setPersons(persons.concat(returnedPerson))).catch(error => console.log(error.response.data))\n          setMessage({message:`Added ${personObj.name}`, isIt:true})\n          setTimeout(() => {\n            setMessage({message:null,isIt:null})\n          }, 3000)\n        }\n        setNewName('')\n        setPhoneNumber('')\n    }\n\n\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input onChange={(event) => setNewName(event.target.value)} />\n        </div>\n        <div>\n          number: <input onChange={(event) => setPhoneNumber(event.target.value)} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\nimport connectionService from '../services/Connection'\n\nconst Persons = ({persons, newFilter, setPersons, setMessage}) => {\n  \n  const removeById = (person) => {\n    window.confirm(`Delete ${person.name}?`) ? connectionService.deletePerson(person.id).then(r => setPersons(persons.filter(x => x.id !== person.id))).catch(error => setMessage({message:`Information of ${person.name} has already been removed from server`, isIt:false})) : console.log('no')\n  }\n\n  return (\n    <div>\n        {persons.map(p => {\n        if (p.name.toLowerCase().includes(newFilter.toLowerCase())) {\n          return <p key={p.id}>{p.name} {p.number} <button onClick={() => removeById(p)}> delete </button></p>\n        }\n        else return ''\n      })}\n    </div>\n  )\n}\n\nexport default Persons","import React from 'react'\n\nconst Notification = ({message,isIt}) => {\n    const messageStyleGood = {\n        background: 'lightgray',\n        color: 'green',\n        fontSize: '25px',\n        borderStyle: 'solid',\n        borderRadius: '5px',\n        padding: '10px',\n        marginBottom: '10px'\n\n    }\n\n    const messageStyleBad = {\n        background: 'lightgray',\n        color: 'red',\n        fontSize: '25px',\n        borderStyle: 'solid',\n        borderRadius: '5px',\n        padding: '10px',\n        marginBottom: '10px'\n\n    }\n    console.log(isIt)\n    if (message === null) return null\n    if (isIt) return <p style={messageStyleGood}>{message}</p>\n    else return (\n        <p style={messageStyleBad}>{message}</p>\n    )\n\n} \n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport connectionService from './services/Connection'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newFilter, setNewFilter ] = useState('')\n  const [ newMessage, setMessage] = useState({ message: null, isIt: true})\n\n  useEffect(() => {\n    connectionService.getAll().then(initialPersons => setPersons(initialPersons))\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={newMessage.message} isIt={newMessage.isIt} />\n      <Filter setNewFilter={setNewFilter} />\n      <h2> add a new </h2>\n      <PersonForm persons={persons} setPersons={setPersons} setMessage={setMessage} />\n      <h2>Numbers</h2>\n      <Persons persons={persons} newFilter={newFilter} setPersons={setPersons}  setMessage={setMessage} />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}